import gulp from 'gulp'
import dartSass from 'sass'
import gulpSass from 'gulp-sass'
import del from 'del'
import cleanCss from 'gulp-clean-css'
import rename from 'gulp-rename'
import babel from 'gulp-babel'
import uglify from 'gulp-uglify'
import autoPrefixer from 'gulp-autoprefixer'
import imagein from 'gulp-imagemin'
import htmlmin from 'gulp-htmlmin'
import gulpSize from 'gulp-size'
import newer from 'gulp-newer'
import name from 'browser-sync'
import webpack from 'webpack-stream'
import fileinclude from 'gulp-file-include'
import webp from 'gulp-webp'
import sourcemaps from 'gulp-sourcemaps'
import gulpCssMin from 'gulp-cssmin'
import ttf2woff from 'gulp-ttf2woff'
import { stream as critical } from 'critical'
const browserSync = name.create()
const sass = gulpSass(dartSass)

const paths = {
  htmlMin: {
    src: 'src/*.html',
    dest: 'dist/',
    destP: 'docs/'
  },
  html: {
    src: 'src/*.html',
    dest: 'dist/htmlRaw'
  },
  componentsHtml: {
    src: 'src/html/**/*',
    allSrc: 'src/html/**/*',
    dest: 'dist/html'
  },
  stylesMin: {
    src: 'src/styles/**/*',
    dest: 'dist/styles/',
    destP: 'docs/styles/'
  },
  styles: {
    src: 'src/styles/**/*',
    dest: 'dist/stylesRaw/'
  },

  scripts: {
    src: 'src/scripts/**/*.js',
    dest: 'dist/scripts/',
    destP: 'docs/scripts/'
  },
  images: {
    src: 'src/img/**/*',
    dest: 'dist/img/',
    destP: 'docs/img/'
  },

  fonts: {
    src: 'src/fonts/*',
    dest: 'dist/fonts/',
    destP: 'docs/fonts/'
  }
}

function clean () {
  // return del(["dist/*", "!dist/src/img", "!dist/src/fonts"]);
  return del(['dist/*', 'docs/*'])
  // return del(['dcs/*', '!dist/src/img', '!dist/src/fonts'])
}

function criticalP () {
  return gulp
    .src('docs/*.html')
    .pipe(
      critical({
        base: 'docs/',
        inline: true,
        css: ['docs/styles/main.min.css']
      })
    )
    .pipe(gulp.dest('docs'))
}

function htmlMin () {
  return gulp
    .src(paths.htmlMin.src)
    .pipe(
      fileinclude({
        prefix: '@@',
        basepath: '@file'
      })
    )
    .pipe(
      htmlmin({
        includeAutoGeneratedTags: true,
        removeAttributeQuotes: true,
        removeComments: true,
        removeRedundantAttributes: true,
        removeScriptTypeAttributes: true,
        removeStyleLinkTypeAttributes: true,
        sortClassName: true,
        useShortDoctype: true,
        collapseWhitespace: true
      })
    )

    .pipe(gulpSize({ showFiles: true }))
    .pipe(gulp.dest(paths.htmlMin.dest))
    .pipe(browserSync.stream())
}

function htmlMinP () {
  return gulp
    .src(paths.htmlMin.src)
    .pipe(
      fileinclude({
        prefix: '@@',
        basepath: '@file'
      })
    )
    .pipe(
      htmlmin({
        includeAutoGeneratedTags: true,
        removeAttributeQuotes: true,
        removeComments: true,
        removeRedundantAttributes: true,
        removeScriptTypeAttributes: true,
        removeStyleLinkTypeAttributes: true,
        sortClassName: true,
        useShortDoctype: true,
        collapseWhitespace: true
      })
    )

    .pipe(gulpSize({ showFiles: true }))
    .pipe(gulp.dest(paths.htmlMin.destP))
    .pipe(browserSync.stream())
}

function html () {
  return gulp
    .src(paths.html.src)
    .pipe(
      fileinclude({
        prefix: '@@',
        basepath: '@file'
      })
    )

    .pipe(gulpSize({ showFiles: true }))
    .pipe(gulp.dest(paths.html.dest))
    .pipe(browserSync.stream())
}

function componentsHtml () {
  return gulp
    .src(paths.componentsHtml.src)
    .pipe(
      fileinclude({
        prefix: '@@',
        basepath: '@file'
      })
    )
    .pipe(gulpSize({ showFiles: true }))
    .pipe(gulp.dest(paths.componentsHtml.dest))
    .pipe(browserSync.stream())
}

function stylesMin () {
  return (
    gulp
      .src(paths.stylesMin.src)
      .pipe(sourcemaps.init())
      .pipe(sass())
      .pipe(
        autoPrefixer({
          cascade: false
        })
      )
      .pipe(cleanCss({ level: 2 }))
      .pipe(gulpCssMin())
      .pipe(
        rename({
          basename: 'main',
          suffix: '.min'
        })
      )
      .pipe(sourcemaps.write())
      .pipe(gulpSize({ showFiles: true }))
      .pipe(gulp.dest(paths.stylesMin.dest))
      .pipe(browserSync.stream())
  )
}

gulp.task('stylesProdMin', stylesMinP
)

function stylesMinP () {
  return (
    gulp
      .src(paths.stylesMin.src)
      .pipe(sass())
      .pipe(
        autoPrefixer({
          cascade: false
        })
      )
      .pipe(cleanCss({ level: 2 }))
      .pipe(gulpCssMin())
      .pipe(
        rename({
          basename: 'main',
          suffix: '.min'
        })
      )
      .pipe(gulpSize({ showFiles: true }))
      .pipe(gulp.dest(paths.stylesMin.destP))
  )
}

function styles () {
  return (
    gulp
      .src(paths.styles.src)
      .pipe(sourcemaps.init())
      .pipe(sass())
      .pipe(
        rename({
          basename: 'main',
          suffix: '.raw'
        })
      )
      .pipe(sourcemaps.write())
      .pipe(gulpSize({ showFiles: true }))
      .pipe(gulp.dest(paths.styles.dest))
      .pipe(browserSync.stream())
  )
}

function scripts () {
  return gulp
    .src(paths.scripts.src)
    .pipe(
      babel({
        presets: ['@babel/env']
      })
    )
    .pipe(gulpSize({ showFiles: true }))
    .pipe(uglify())
    .pipe(
      webpack({
        devtool: 'source-map'
      })
    )
    .pipe(gulp.dest(paths.scripts.dest))
    .pipe(browserSync.stream())
}
function scriptsP () {
  return gulp
    .src(paths.scripts.src)
    .pipe(
      babel({
        presets: ['@babel/env']
      })
    )
    .pipe(gulpSize({ showFiles: true }))
    .pipe(uglify())
    .pipe(
      webpack({
        devtool: 'source-map'
      })
    )
    .pipe(gulp.dest(paths.scripts.destP))
    .pipe(browserSync.stream())
}

function watch () {
  browserSync.init({
    server: 'dist/',
    port: 3002
  })
  gulp.watch(paths.componentsHtml.src, gulp.series(componentsHtml, html, htmlMin))
  gulp.watch(paths.html.src, gulp.series(htmlMin, html))
  gulp.watch(paths.componentsHtml.dest).on('change', browserSync.reload)
  gulp.watch(paths.styles.src, gulp.series(stylesMin, styles))
  gulp.watch(paths.scripts.src, scripts)
  gulp.watch(paths.fonts.src, fonts)
  gulp.watch(paths.images.src, img)
}

gulp.task('fonts', fonts)

function fonts () {
  return gulp.src(paths.fonts.src)
    .pipe(ttf2woff())
    .pipe(gulp.dest(paths.fonts.dest))
}

function fontsP () {
  return gulp.src(paths.fonts.src)
    .pipe(ttf2woff())
    .pipe(gulp.dest(paths.fonts.destP))
}

function img () {
  return gulp
    .src(paths.images.src)
    .pipe(newer(paths.images.dest))
    .pipe(imagein())
    .pipe(webp())
    .pipe(gulp.dest(paths.images.dest))
}

function imgP () {
  return gulp
    .src(paths.images.src)
    .pipe(newer(paths.images.destP))
    .pipe(imagein())
    .pipe(webp())
    .pipe(gulp.dest(paths.images.destP))
}

const build = gulp.series(
  clean,
  gulp.parallel(styles, stylesMin, scripts, img, fonts, html, htmlMin, componentsHtml),
  watch
)

const prod = gulp.series(
  clean, imgP, fontsP, htmlMinP, stylesMinP, scriptsP, criticalP
)

// Цепочка прод пока тестовая

export { clean }
export { styles }
export { watch }
export { build }
export { scripts }
export { img }
export { componentsHtml }
export { prod }
export default build
